{
	"info": {
		"_postman_id": "all-apis-uuid-12345",
		"name": "🏢 Stock Inventory - Complete API Collection",
		"description": "Complete API collection for Stock Inventory Management System including Authentication, Products, Purchases, and Invoices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345"
	},
	"item": [
		{
			"name": "🔐 Authentication",
			"item": [
				{
					"name": "📝 Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User registered successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"registered successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\",\n    \"role\": [\"user\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "📝 Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin registered successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"registered successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin_user\",\n    \"email\": \"admin@company.com\",\n    \"password\": \"admin123\",\n    \"role\": [\"admin\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "Register an admin user account"
					},
					"response": []
				},
				{
					"name": "🔑 Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful - JWT token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.expect(jsonData.type).to.eql(\"Bearer\");",
									"    ",
									"    // Save token for future requests",
									"    pm.environment.set(\"jwt_token\", jsonData.token);",
									"    pm.environment.set(\"user_id\", jsonData.id);",
									"    pm.environment.set(\"username\", jsonData.username);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john_doe\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Login with username and password to get JWT token"
					},
					"response": []
				},
				{
					"name": "🔑 Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.expect(jsonData.type).to.eql(\"Bearer\");",
									"    ",
									"    // Save admin token",
									"    pm.environment.set(\"admin_jwt_token\", jsonData.token);",
									"    pm.environment.set(\"admin_user_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"User has admin role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles).to.include('ROLE_ADMIN');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin_user\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						},
						"description": "Login as admin to get admin privileges"
					},
					"response": []
				}
			]
		},
		{
			"name": "📦 Products",
			"item": [
				{
					"name": "📋 Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.environment.set(\"product_id\", jsonData[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Get all products (requires USER+ role)"
					},
					"response": []
				},
				{
					"name": "➕ Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Product created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.code).to.eql('21244');",
								"    pm.expect(jsonData.product).to.eql('powder');",
								"    pm.expect(jsonData.brand).to.eql('ponds');",
								"    pm.expect(jsonData.category).to.eql('cosmetics');",
									"    pm.environment.set(\"created_product_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"21244\",\n    \"product\": \"powder\",\n    \"brand\": \"ponds\",\n    \"category\": \"cosmetics\",\n    \"price\": 123,\n    \"color\": \"Yellow\",\n    \"thumbnailImage\": \"string\",\n    \"subImages\": \"string\",\n    \"description\": \"string\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Create a new product (requires MODERATOR+ role)"
					},
					"response": []
				}
			]
		},
		{
			"name": "🛒 Purchases",
			"item": [
				{
					"name": "📋 Get All Purchases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.environment.set(\"purchase_id\", jsonData[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchases"
							]
						},
						"description": "Get all purchases (requires USER+ role)"
					},
					"response": []
				},
				{
					"name": "➕ Create Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Purchase created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.poId).to.eql('PO-2024-001');",
									"    pm.environment.set(\"created_purchase_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vendorName\": \"ABC Suppliers\",\n    \"poId\": \"PO-2024-001\",\n    \"productName\": \"Gaming Laptop\",\n    \"quantity\": 5,\n    \"unitPrice\": 1299.99,\n    \"purchaseDate\": \"2024-01-15\",\n    \"deliveryDate\": \"2024-01-25\",\n    \"paymentStatus\": \"PENDING\",\n    \"productId\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/purchases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchases"
							]
						},
						"description": "Create a new purchase (requires MODERATOR+ role)"
					},
					"response": []
				},
				{
					"name": "🔄 Update Purchase Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/purchases/{{created_purchase_id}}/status?status=PAID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"purchases",
								"{{created_purchase_id}}",
								"status"
							],
							"query": [
								{
									"key": "status",
									"value": "PAID"
								}
							]
						},
						"description": "Update purchase payment status"
					},
					"response": []
				}
			]
		},
		{
			"name": "🧾 Invoices",
			"item": [
				{
					"name": "📋 Get All Invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.environment.set(\"invoice_id\", jsonData[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices"
							]
						},
						"description": "Get all invoices (requires USER+ role)"
					},
					"response": []
				},
				{
					"name": "➕ Create Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Invoice created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.invoiceNumber).to.eql('INV-2024-001');",
									"    pm.environment.set(\"created_invoice_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"invoiceNumber\": \"INV-2024-001\",\n    \"customerName\": \"John Smith\",\n    \"customerEmail\": \"john.smith@example.com\",\n    \"customerPhone\": \"+1-555-0123\",\n    \"customerAddress\": \"123 Main St, City, State 12345\",\n    \"invoiceDate\": \"2024-01-15\",\n    \"dueDate\": \"2024-02-15\",\n    \"status\": \"PENDING\",\n    \"items\": [\n        {\n            \"productId\": 1,\n            \"productName\": \"Gaming Laptop\",\n            \"quantity\": 2,\n            \"unitPrice\": 1299.99,\n            \"totalPrice\": 2599.98\n        }\n    ],\n    \"subtotal\": 2599.98,\n    \"taxAmount\": 259.99,\n    \"totalAmount\": 2859.97,\n    \"notes\": \"Thank you for your business!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/invoices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices"
							]
						},
						"description": "Create a new invoice (requires MODERATOR+ role)"
					},
					"response": []
				},
				{
					"name": "🔄 Update Invoice Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/invoices/{{created_invoice_id}}/status?status=PAID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"invoices",
								"{{created_invoice_id}}",
								"status"
							],
							"query": [
								{
									"key": "status",
									"value": "PAID"
								}
							]
						},
						"description": "Update invoice status"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}
