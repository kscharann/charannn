{
	"info": {
		"_postman_id": "auth-collection-uuid-12345",
		"name": "üîê Stock Inventory - Authentication APIs",
		"description": "Complete authentication collection for Stock Inventory Management System with JWT token support",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345"
	},
	"item": [
		{
			"name": "üë§ User Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"registered successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"role\": [\"user\"]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Register a new user with username, email, password and role"
			},
			"response": []
		},
		{
			"name": "üë§ Admin Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"registered successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"admin\",\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\",\n    \"role\": [\"admin\"]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Register an admin user with admin role"
			},
			"response": []
		},
		{
			"name": "üë§ Moderator Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"registered successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"moderator\",\n    \"email\": \"mod@example.com\",\n    \"password\": \"mod123\",\n    \"role\": [\"mod\"]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Register a moderator user with moderator role"
			},
			"response": []
		},
		{
			"name": "üîë User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains JWT token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.exist;",
							"    pm.expect(jsonData.type).to.eql(\"Bearer\");",
							"    ",
							"    // Save token to environment variable",
							"    pm.environment.set(\"jwt_token\", jsonData.token);",
							"    pm.environment.set(\"user_id\", jsonData.id);",
							"    pm.environment.set(\"username\", jsonData.username);",
							"});",
							"",
							"pm.test(\"Response contains user details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.exist;",
							"    pm.expect(jsonData.email).to.exist;",
							"    pm.expect(jsonData.roles).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				},
				"description": "Login with username and password to get JWT token"
			},
			"response": []
		},
		{
			"name": "üîë Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains JWT token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.exist;",
							"    pm.expect(jsonData.type).to.eql(\"Bearer\");",
							"    ",
							"    // Save admin token to environment variable",
							"    pm.environment.set(\"admin_jwt_token\", jsonData.token);",
							"    pm.environment.set(\"admin_user_id\", jsonData.id);",
							"});",
							"",
							"pm.test(\"User has admin role\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.roles).to.include(\"ROLE_ADMIN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				},
				"description": "Login as admin to get admin JWT token"
			},
			"response": []
		},
		{
			"name": "üîë Moderator Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains JWT token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.exist;",
							"    pm.expect(jsonData.type).to.eql(\"Bearer\");",
							"    ",
							"    // Save moderator token to environment variable",
							"    pm.environment.set(\"mod_jwt_token\", jsonData.token);",
							"    pm.environment.set(\"mod_user_id\", jsonData.id);",
							"});",
							"",
							"pm.test(\"User has moderator role\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.roles).to.include(\"ROLE_MODERATOR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"moderator\",\n    \"password\": \"mod123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				},
				"description": "Login as moderator to get moderator JWT token"
			},
			"response": []
		},
		{
			"name": "üß™ Test JWT Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token is valid\", function () {",
							"    var responseText = pm.response.text();",
							"    pm.expect(responseText).to.include(\"User Content\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/test/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"test",
						"user"
					]
				},
				"description": "Test if JWT token is valid by accessing protected endpoint"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}
